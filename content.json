{"meta":{"title":"Damon Ren的blog","subtitle":null,"description":"人生第一快乐是做到自己认为自己做不到的事，人生第二快乐是做到别人认为自己做不到的事。","author":"Damon Ren （江流百黎）","url":"http://yoursite.com"},"pages":[{"title":"archives","date":"2018-03-01T08:30:52.000Z","updated":"2018-03-01T08:33:14.000Z","comments":false,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"about","date":"2018-03-01T08:31:17.000Z","updated":"2018-03-01T08:32:35.000Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Damon Ren笔名： 江流百黎未完待续…"},{"title":"categories","date":"2018-03-01T08:20:08.000Z","updated":"2018-03-01T08:29:39.000Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-03-01T08:31:07.000Z","updated":"2018-03-01T08:33:55.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"TabLayout的用法（一）","slug":"TabLayout的用法（一）","date":"2018-03-22T07:37:39.000Z","updated":"2018-03-22T08:48:41.000Z","comments":true,"path":"2018/03/22/TabLayout的用法（一）/","link":"","permalink":"http://yoursite.com/2018/03/22/TabLayout的用法（一）/","excerpt":"布局代码123456789101112131415161718192021222324252627282930313233343536373839404142&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;android.support.design.widget.TabLayout android:id=&quot;@+id/toolbar_tab&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:layout_gravity=&quot;bottom&quot; android:background=&quot;#ffffff&quot; android:fillViewport=&quot;false&quot; app:tabMode=&quot;fixed&quot; app:layout_scrollFlags=&quot;scroll&quot; app:tabIndicatorColor=&quot;#057523&quot; app:tabIndicatorHeight=&quot;2.0dp&quot; app:tabSelectedTextColor=&quot;#057523&quot; app:tabTextColor=&quot;#ced0d3&quot;&gt; &lt;android.support.design.widget.TabItem android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;a&quot; /&gt; &lt;android.support.design.widget.TabItem android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;b&quot; /&gt; &lt;android.support.design.widget.TabItem android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;c&quot; /&gt; &lt;/android.support.design.widget.TabLayout&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/view_pager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt;","text":"布局代码123456789101112131415161718192021222324252627282930313233343536373839404142&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;android.support.design.widget.TabLayout android:id=&quot;@+id/toolbar_tab&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:layout_gravity=&quot;bottom&quot; android:background=&quot;#ffffff&quot; android:fillViewport=&quot;false&quot; app:tabMode=&quot;fixed&quot; app:layout_scrollFlags=&quot;scroll&quot; app:tabIndicatorColor=&quot;#057523&quot; app:tabIndicatorHeight=&quot;2.0dp&quot; app:tabSelectedTextColor=&quot;#057523&quot; app:tabTextColor=&quot;#ced0d3&quot;&gt; &lt;android.support.design.widget.TabItem android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;a&quot; /&gt; &lt;android.support.design.widget.TabItem android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;b&quot; /&gt; &lt;android.support.design.widget.TabItem android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;c&quot; /&gt; &lt;/android.support.design.widget.TabLayout&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/view_pager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt; 属性说明12345app:tabIndicatorColor ：指示条的颜色app:tabIndicatorHeight ：指示条的高度app:tabSelectedTextColor ： tab被选中时的字体颜色app:tabTextColor ： tab未被选中时的字体颜色app:tabMode=&quot;scrollable&quot; ： 默认是fixed：固定的，标签很多时候会被挤压，不能滑动。 不显示指示条12app:tabIndicatorHeight=&quot;0dp&quot;app:tabIndicatorColor=&quot;@color/transparent&quot; tab明明设置的小写，但是运行出来确是大写 如何显示小写：12//找到了一个属性叫app:tabTextAppearance，这是Tablayout的属性。所以我们要自定义样式app:tabTextAppearance=&quot;@style/MyTabLayoutTextAppearance&quot; styles.xml里12345&lt;style name=&quot;MyTabLayoutTextAppearance&quot;parent=&quot;TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse&quot;&gt;&lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&lt;item name=&quot;android:textAllCaps&quot;&gt;false&lt;/item&gt;&lt;/style&gt;//这里的android:textAllCaps属性就是控制字体大小写的，TabLayout里默认是true，我们手动改成false即可 调节字体大小123app:tabTextAppearance=&quot;@android:style/TextAppearance.Holo.Large&quot;app:tabTextAppearance=&quot;@android:style/TextAppearance.Holo.Medium&quot;app:tabTextAppearance=&quot;@android:style/TextAppearance.Holo.Small&quot; 不要用文本，用icon Tab是使用adapter中的getPageTitle()方法做其显示的内容，这个方法返回类型为CharSequence。于是，我们可以在PagerAdapter中重写getPageTitle()方法，创建一个SpannableString，而将图标放置在ImageSpan中，设置在SpannableString中. 12345678910111213141516private int[] imageResId = &#123; R.mipmap.ic_0, R.mipmap.ic_1, R.mipmap.ic_2 &#125;; @Override public CharSequence getPageTitle(int position)&#123; Drawable image = ContextCompat.getDrawable(MainActivity.this, imageResId[position]); image.setBounds(0, 0, image.getIntrinsicWidth(), image.getIntrinsicHeight()); SpannableString sb = new SpannableString(&quot; &quot;); ImageSpan imageSpan = new ImageSpan(image, ImageSpan.ALIGN_BOTTOM); sb.setSpan(imageSpan, 0, 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); return sb; &#125; 文本+icon12//只需加上title即可SpannableString spannableString = new SpannableString(&quot; &quot; + title);","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"MaterialDesign","slug":"Android/UI组件/MaterialDesign","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/"},{"name":"TabLayout","slug":"Android/UI组件/MaterialDesign/TabLayout","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/TabLayout/"}],"tags":[{"name":"TabLayout","slug":"TabLayout","permalink":"http://yoursite.com/tags/TabLayout/"},{"name":"MaterialDesign","slug":"MaterialDesign","permalink":"http://yoursite.com/tags/MaterialDesign/"}]},{"title":"EditText的使用","slug":"EditText的使用","date":"2018-03-22T02:57:00.000Z","updated":"2018-03-22T08:48:22.000Z","comments":true,"path":"2018/03/22/EditText的使用/","link":"","permalink":"http://yoursite.com/2018/03/22/EditText的使用/","excerpt":"EditText切换明密文1editText1.setTransformationMethod(PasswordTransformationMethod.getInstance());//明文 1editText1.setTransformationMethod(HideReturnsTransformationMethod.getInstance());//密文","text":"EditText切换明密文1editText1.setTransformationMethod(PasswordTransformationMethod.getInstance());//明文 1editText1.setTransformationMethod(HideReturnsTransformationMethod.getInstance());//密文 拿到drawableRight的bounds和drawablesfinal Drawable[] drawables = editText1.getCompoundDrawables();final int eyeWidth = drawables[2].getBounds().width();// 眼睛图标的宽度final Drawable drawableEyeOpen = getResources().getDrawable(R.drawable.open);drawableEyeOpen.setBounds(drawables[2].getBounds());//这一步不能省略 drawableRight的点击事件123456789101112131415161718192021editText1.setOnTouchListener(new View.OnTouchListener() &#123; @Override public boolean onTouch(View v, MotionEvent event) &#123; if (event.getAction() == MotionEvent.ACTION_UP) &#123; float et_pwdMinX = v.getWidth() - eyeWidth - editText1.getPaddingRight(); float et_pwdMaxX = v.getWidth(); float et_pwdMinY = 0; float et_pwdMaxY = v.getHeight(); float x = event.getX(); float y = event.getY(); if (x &lt; et_pwdMaxX &amp;&amp; x &gt; et_pwdMinX &amp;&amp; y &gt; et_pwdMinY &amp;&amp; y &lt; et_pwdMaxY) &#123; // 点击了眼睛图标的位置 &#125; &#125; return false; &#125; &#125; 光标的处理光标位置 editText.setSelection(index); 取消光标显示 edittext.setCursorVisible(false);","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"EditText","slug":"Android/UI组件/EditText","permalink":"http://yoursite.com/categories/Android/UI组件/EditText/"}],"tags":[{"name":"EditText","slug":"EditText","permalink":"http://yoursite.com/tags/EditText/"},{"name":"明文密文","slug":"明文密文","permalink":"http://yoursite.com/tags/明文密文/"}]},{"title":"checkbox的使用","slug":"checkbox的使用","date":"2018-03-22T02:41:51.000Z","updated":"2018-03-22T08:47:51.000Z","comments":true,"path":"2018/03/22/checkbox的使用/","link":"","permalink":"http://yoursite.com/2018/03/22/checkbox的使用/","excerpt":"CheckBox的OnCheckChangedListener和OnClickListener的区别CheckBox状态监听一般使用OnCheckChangedListener， CheckBox 和 Switch 的状态不一定通过点击改变，还可以通过其他的方式，比如直接使用方法setChecked，这样的话 OnClickListener就不能监听到，它状态的改变不是来自onClick事件，OnCheckChangedListener则是监听CheckBox的状态。","text":"CheckBox的OnCheckChangedListener和OnClickListener的区别CheckBox状态监听一般使用OnCheckChangedListener， CheckBox 和 Switch 的状态不一定通过点击改变，还可以通过其他的方式，比如直接使用方法setChecked，这样的话 OnClickListener就不能监听到，它状态的改变不是来自onClick事件，OnCheckChangedListener则是监听CheckBox的状态。","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"CheckBox","slug":"Android/UI组件/CheckBox","permalink":"http://yoursite.com/categories/Android/UI组件/CheckBox/"}],"tags":[{"name":"CheckBox","slug":"CheckBox","permalink":"http://yoursite.com/tags/CheckBox/"},{"name":"OnCheckChangedListener","slug":"OnCheckChangedListener","permalink":"http://yoursite.com/tags/OnCheckChangedListener/"},{"name":"OnClickListener","slug":"OnClickListener","permalink":"http://yoursite.com/tags/OnClickListener/"}]},{"title":"AlertDialog的使用","slug":"AlertDialog的使用","date":"2018-03-22T02:29:54.000Z","updated":"2018-03-22T08:47:16.000Z","comments":true,"path":"2018/03/22/AlertDialog的使用/","link":"","permalink":"http://yoursite.com/2018/03/22/AlertDialog的使用/","excerpt":"自定义布局代码：123456789101112131415161718192021222324252627282930AlertDialog.Builder builder = new AlertDialog.Builder(this); final AlertDialog dialog = builder.create(); View view = View.inflate(this, R.layout.dailog_input_password, null); //dialog.setView(view);// 将自定义的布局文件设置给dialog dialog.setView(view, 0, 0, 0, 0);// 设置边距为0,保证在2.x的版本上运行没问题 final EditText etPassword = (EditText) view .findViewById(R.id.et_password); Button btnOK = (Button) view.findViewById(R.id.btn_ok); Button btnCancel = (Button) view.findViewById(R.id.btn_cancel); btnOK.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View v) &#123; &#125; &#125;); btnCancel.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View v) &#123; dialog.dismiss();// 隐藏dialog &#125; &#125;); dialog.show();","text":"自定义布局代码：123456789101112131415161718192021222324252627282930AlertDialog.Builder builder = new AlertDialog.Builder(this); final AlertDialog dialog = builder.create(); View view = View.inflate(this, R.layout.dailog_input_password, null); //dialog.setView(view);// 将自定义的布局文件设置给dialog dialog.setView(view, 0, 0, 0, 0);// 设置边距为0,保证在2.x的版本上运行没问题 final EditText etPassword = (EditText) view .findViewById(R.id.et_password); Button btnOK = (Button) view.findViewById(R.id.btn_ok); Button btnCancel = (Button) view.findViewById(R.id.btn_cancel); btnOK.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View v) &#123; &#125; &#125;); btnCancel.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View v) &#123; dialog.dismiss();// 隐藏dialog &#125; &#125;); dialog.show(); 改变窗口透明度12345678910try &#123; WindowManager.LayoutParams params = dialog.getWindow().getAttributes(); params.width= 700; //params.height=700; params.alpha = 1f; dialog.getWindow().setAttributes(params); &#125;catch (NullPointerException e)&#123; Log.wtf(&quot;alertDialogwindow&quot;,e); &#125; 系统AlertDialog12345678910111213141516AlertDialog.Builder builder = new AlertDialog.Builder(context); builder.setMessage(&quot;确认退出吗？&quot;); builder.setTitle(&quot;提示&quot;); builder.setPositiveButton(&quot;确认&quot;, new DialogInterface.OnClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which) &#123; listener.positiveResult(dialog,which); &#125; &#125;); builder.setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which) &#123; &#125; &#125;); builder.create().show(); 七种不同dialoghttps://www.oschina.net/question/54100_32486 多选，单选，功能菜单。AlertDialog的多类型设置http://www.jianshu.com/p/6caffdbcd5db alertdialog默认背景做透明处理http://ask.csdn.net/questions/242967 1234567891011&lt;style name=&quot;AlertDialogStyle&quot; parent=&quot;@android:style/Theme.Dialog&quot;&gt; &lt;item name=&quot;android:windowBackground&quot;&gt;@android:color/transparent&lt;/item&gt; &lt;item name=&quot;android:windowContentOverlay&quot;&gt;@null&lt;/item&gt; &lt;item name=&quot;android:windowIsFloating&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:windowFrame&quot;&gt;@null&lt;/item&gt; &lt;item name=&quot;android:backgroundDimEnabled&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;&lt;/style&gt; AlertDialog dialog = new AlertDialog.Builder(activity, R.style.AlertDialogStyle).create();","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"dialog","slug":"Android/UI组件/dialog","permalink":"http://yoursite.com/categories/Android/UI组件/dialog/"}],"tags":[{"name":"AlertDialog","slug":"AlertDialog","permalink":"http://yoursite.com/tags/AlertDialog/"}]},{"title":"progressDialog与progressBar","slug":"progressDialog与progressBar","date":"2018-03-22T02:17:19.000Z","updated":"2018-03-22T08:46:46.000Z","comments":true,"path":"2018/03/22/progressDialog与progressBar/","link":"","permalink":"http://yoursite.com/2018/03/22/progressDialog与progressBar/","excerpt":"progressDialog圆形和水平 系统两种进度条http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0703/1628.html progressBar更换progressDrawablehttp://www.jb51.net/article/105417.htm","text":"progressDialog圆形和水平 系统两种进度条http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0703/1628.html progressBar更换progressDrawablehttp://www.jb51.net/article/105417.htm 123456789101112131415161718192021222324252627282930//布局文件代码：&lt;ProgressBarandroid:id=&quot;@+id/progressbar&quot;android:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:indeterminateDrawable=&quot;@drawable/progressbar&quot; /&gt;//此XML文件新建在drawable目录下：文件名为：progressbar&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;animated-rotate xmlns:android=&quot;&lt;a href=&quot;http://schemas.android.com/apk/res/android&quot; rel=&quot;external nofollow&quot; &gt;http://schemas.android.com/apk/res/android&lt;/a&gt;&quot; android:pivotX=&quot;50%&quot; android:pivotY=&quot;50%&quot; android:fromDegrees=&quot;0&quot; android:toDegrees=&quot;360&quot;&gt; &lt;shape android:shape=&quot;ring&quot; android:innerRadiusRatio=&quot;3&quot; android:thicknessRatio=&quot;8&quot; android:useLevel=&quot;false&quot;&gt; &lt;gradient android:type=&quot;sweep&quot; android:useLevel=&quot;false&quot; android:startColor=&quot;#6BD3FF&quot; android:centerColor=&quot;#FF7121&quot; android:centerY=&quot;0.50&quot; android:endColor=&quot;#FFFF00&quot; /&gt; &lt;/shape&gt;&lt;/animated-rotate&gt;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"dialog","slug":"Android/UI组件/dialog","permalink":"http://yoursite.com/categories/Android/UI组件/dialog/"}],"tags":[{"name":"progressDialog","slug":"progressDialog","permalink":"http://yoursite.com/tags/progressDialog/"},{"name":"progressBar","slug":"progressBar","permalink":"http://yoursite.com/tags/progressBar/"}]},{"title":"library使用注意事项","slug":"library使用注意事项","date":"2018-03-22T01:34:30.000Z","updated":"2018-03-22T01:55:21.000Z","comments":true,"path":"2018/03/22/library使用注意事项/","link":"","permalink":"http://yoursite.com/2018/03/22/library使用注意事项/","excerpt":"app依赖library，就可以使用它几乎所有东西。包括src,buildegradle,libs。。。一个as 的工程中，module不宜太多，否则会影响编译的速度，建议将不是经常变动的module打包成aar，主工程直接依赖aar可以大大提高编译的速度。","text":"app依赖library，就可以使用它几乎所有东西。包括src,buildegradle,libs。。。一个as 的工程中，module不宜太多，否则会影响编译的速度，建议将不是经常变动的module打包成aar，主工程直接依赖aar可以大大提高编译的速度。 当library的manifest里有权限的话，app的manifest可以不再重复添加；application类是必须在app的manifest注册。因为library是不能单独运行的library里的四大组件可以在其manifest里注册，app里不用管library的manifest里的Activity不能写1234&lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&lt;/intent-filter&gt; 这会使手机桌面多出现icon。如果librarys都写了这句，有几个library，桌面就多出几个icon library里不用重写Application。因为只有app的application集成library的Application，才会有用。library清单文件里不能设置application，因为它是库，不是应用程序 library代码里不能使用switch-case library用butterknife，@BindView(R2.id.xxx) @OnClick(R2.id.xxx)setContentView(R.id.xcxx) findviewbyid(R.id.x)正常butterknife的注解需要用R2，系统的仍用R","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"知识点","slug":"Android/知识点","permalink":"http://yoursite.com/categories/Android/知识点/"}],"tags":[{"name":"library","slug":"library","permalink":"http://yoursite.com/tags/library/"}]},{"title":"按微信时间规则格式化时间wechattimeformat","slug":"按微信时间规则格式化时间wechattimeformat","date":"2018-03-01T07:49:37.000Z","updated":"2018-03-01T10:01:19.000Z","comments":true,"path":"2018/03/01/按微信时间规则格式化时间wechattimeformat/","link":"","permalink":"http://yoursite.com/2018/03/01/按微信时间规则格式化时间wechattimeformat/","excerpt":"微信的时间格式化规则： 表示的是过去的时间，未来的时间无效 如果是今天，12点为中午，其他的时间分为上午和下午，以”中午几:xx”格式显示，12小时制（如下午6:09） 如果是昨天，显示为”昨天”","text":"微信的时间格式化规则： 表示的是过去的时间，未来的时间无效 如果是今天，12点为中午，其他的时间分为上午和下午，以”中午几:xx”格式显示，12小时制（如下午6:09） 如果是昨天，显示为”昨天” 如果是昨天以前的时间 昨天是周二或周三、周四、周五… 那么前天显示周一。前天以前的时间显示为”几月几日” 昨天是周一，那么前一周，显示为对应的周几（如昨天周一是20号，那么13-19号显示为周一到周日） 不满足以上两个条件，显示为”几月几日”（如：1月6日） 如果是去年及以前的时间，显示为”xxxx年几月几日”（如2016年1月3日） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172private String handleTime(String time) &#123; date = new Date(); Date start = null; try &#123; start = sdf.parse(time); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; DateTime dateTime = new DateTime(start); DateTime nowDT = new DateTime(date); assert start != null; if (dateTime.isAfter(nowDT)) &#123; Toast.makeText(mContext, &quot;时间有误，不是过去时间，超过了此时此刻&quot;, Toast.LENGTH_SHORT).show(); return &quot;&quot;; &#125;// Period period = new Period(start.getTime(),date.getTime()); if (dateTime.getYearOfCentury() == nowDT.getYearOfCentury()) &#123; int days = nowDT.getDayOfYear() - dateTime.getDayOfYear(); LogUtils.i(tag, &quot;handleTime- 距现在天数： &quot; + days); if (days &lt; 2) &#123; if (days == 1) &#123; String result = &quot;昨天&quot;; return result; &#125; else &#123; String hm = time.substring(13, 16); int hour = dateTime.getHourOfDay(); LogUtils.i(tag, &quot;handleTime- Hour： &quot; + hour); if (hour == 12) &#123; String result = &quot;中午&quot; + hm; return result; &#125; else if (hour &lt; 12) &#123; String result = &quot;早上&quot; + hour + hm; return result; &#125; else if (hour &gt; 12) &#123; hour = hour - 12; String result = &quot;下午&quot; + hour + hm; return result; &#125; &#125; &#125; else &#123; Log.d(&quot;------&quot;, &quot;handleTime: 周: &quot; + nowDT.dayOfWeek().getAsShortText(Locale.ENGLISH)); int week = dateTime.getWeekOfWeekyear(); LogUtils.i(tag, &quot;handleTime- 过去的 第几周： &quot; + week); int nowWeek = nowDT.getWeekOfWeekyear(); LogUtils.i(tag, &quot;handleTime- 现在的 第几周： &quot; + nowWeek); if (week == nowWeek) &#123; String result = dateTime.dayOfWeek().getAsShortText(Locale.CHINESE); return result; &#125; else if (nowWeek - week == 1) &#123; if (nowDT.dayOfWeek().getAsShortText(Locale.ENGLISH).equals(&quot;Mon&quot;) || nowDT.dayOfWeek().getAsShortText(Locale.ENGLISH).equals(&quot;Tue&quot;)) &#123; String result = dateTime.dayOfWeek().getAsShortText(Locale.CHINESE); return result; &#125; &#125; else &#123; int month = dateTime.getMonthOfYear(); int day = dateTime.getDayOfMonth(); String result = month + &quot;月&quot; + day + &quot;日&quot;; return result; &#125; &#125; &#125; else &#123; int year = dateTime.getYear();//2017XX getYearOfCentury只是超过2000年的数字 int month = dateTime.getMonthOfYear(); int day = dateTime.getDayOfMonth(); String result = year + &quot;年&quot; + month + &quot;月&quot; + day + &quot;日&quot;; return result; &#125; return &quot;&quot;; &#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"功能组件","slug":"Android/功能组件","permalink":"http://yoursite.com/categories/Android/功能组件/"},{"name":"时间处理","slug":"Android/功能组件/时间处理","permalink":"http://yoursite.com/categories/Android/功能组件/时间处理/"}],"tags":[{"name":"wechat","slug":"wechat","permalink":"http://yoursite.com/tags/wechat/"}]},{"title":"使用CursorLoader注意事项","slug":"使用CursorLoader注意事项","date":"2018-03-01T07:33:35.000Z","updated":"2018-03-01T10:00:39.000Z","comments":true,"path":"2018/03/01/使用CursorLoader注意事项/","link":"","permalink":"http://yoursite.com/2018/03/01/使用CursorLoader注意事项/","excerpt":"已经实现将Bitmap对象保存成外部存储中的一个jpg格式的文件。但此时该文件只是保存在外部存储的一个目录中，必须进入其所在的目录中才可以看到。在系统图库，相册和其他应用中无法看到新建的图片文件。为了让其他应用能够知道图片文件被创建，必须通知MediaProvider服务将新建的文件添加到图片数据库中。 Android系统中常驻一个MediaProvider服务，对应的进程名为android.process.media，此服务用来管理本机上的媒体文件，提供媒体管理服务。","text":"已经实现将Bitmap对象保存成外部存储中的一个jpg格式的文件。但此时该文件只是保存在外部存储的一个目录中，必须进入其所在的目录中才可以看到。在系统图库，相册和其他应用中无法看到新建的图片文件。为了让其他应用能够知道图片文件被创建，必须通知MediaProvider服务将新建的文件添加到图片数据库中。 Android系统中常驻一个MediaProvider服务，对应的进程名为android.process.media，此服务用来管理本机上的媒体文件，提供媒体管理服务。在系统开机或者收到外部存储的挂载消息后，MediaProvider会调用MediaScanner，MediaScanner会扫描外部存储中的所有文件，根据文件类型的后缀将文件信息保存到对应的数据库中，供其他APP使用。 MediaScannerReceiver是一个广播接收者，当它接收到特定的广播请求后，就会去扫描指定的文件，并根据文件信息将其添加到数据库中。当图片文件被创建后，就可以发送广播给MediaScannerReceiver，通知其扫描新建的图片文件。 保存到本地的图片，如果没发通知给MediaScanner，没有将图片信息保存到系统数据库，使用CursorLoader是加载不到图片的 使用方法： http://blog.csdn.net/yissan/article/details/51961707","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"功能组件","slug":"Android/功能组件","permalink":"http://yoursite.com/categories/Android/功能组件/"},{"name":"图片加载器","slug":"Android/功能组件/图片加载器","permalink":"http://yoursite.com/categories/Android/功能组件/图片加载器/"}],"tags":[{"name":"CursorLoader","slug":"CursorLoader","permalink":"http://yoursite.com/tags/CursorLoader/"}]},{"title":"my first blog","slug":"my-first-blog","date":"2018-03-01T06:24:47.000Z","updated":"2018-03-01T06:56:31.000Z","comments":true,"path":"2018/03/01/my-first-blog/","link":"","permalink":"http://yoursite.com/2018/03/01/my-first-blog/","excerpt":"","text":"122018年3月1日，我正式开通了自己的博客。 每一天都要告诫自己要做点什么，一直在前进。","categories":[{"name":"初始","slug":"初始","permalink":"http://yoursite.com/categories/初始/"}],"tags":[{"name":"初始","slug":"初始","permalink":"http://yoursite.com/tags/初始/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-02-27T10:50:06.000Z","updated":"2018-03-01T09:54:16.000Z","comments":true,"path":"2018/02/27/hello-world/","link":"","permalink":"http://yoursite.com/2018/02/27/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"初始","slug":"初始","permalink":"http://yoursite.com/categories/初始/"}],"tags":[{"name":"初始","slug":"初始","permalink":"http://yoursite.com/tags/初始/"}]}]}