{"meta":{"title":"Damon Ren的blog","subtitle":null,"description":"人生第一快乐是做到自己认为自己做不到的事，人生第二快乐是做到别人认为自己做不到的事。","author":"Damon Ren （江流百黎）","url":"http://yoursite.com"},"pages":[{"title":"archives","date":"2018-03-01T08:30:52.000Z","updated":"2018-03-01T08:33:14.000Z","comments":false,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-03-01T08:20:08.000Z","updated":"2018-03-01T08:29:39.000Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-03-01T08:31:07.000Z","updated":"2018-03-01T08:33:55.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2018-03-01T08:31:17.000Z","updated":"2018-03-23T06:02:39.000Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Damon Ren笔名： 江流百黎微博： 深情但不做备胎 https://weibo.com/harrain 未完待续…"}],"posts":[{"title":"SearchView结合CursorAdapter实现搜索提示","slug":"SearchView结合CursorAdapter实现搜索提示","date":"2018-03-26T01:40:18.000Z","updated":"2018-03-26T02:06:30.000Z","comments":true,"path":"2018/03/26/SearchView结合CursorAdapter实现搜索提示/","link":"","permalink":"http://yoursite.com/2018/03/26/SearchView结合CursorAdapter实现搜索提示/","excerpt":"SearchView本身的搜索框就是AutoCompleteTextView的一个子类，有图有真相。 AutoCompleteTextView是可以通过设置适配器来实现文本补全提示功能的，所以，SearchView中的搜索框一样也可以，不过SearchView提供了setSuggestionsAdapter()方法可以直接为搜索框设置适配器，需要注意的是，这个适配器必须跟数据库的Cursor对象一起使用.","text":"SearchView本身的搜索框就是AutoCompleteTextView的一个子类，有图有真相。 AutoCompleteTextView是可以通过设置适配器来实现文本补全提示功能的，所以，SearchView中的搜索框一样也可以，不过SearchView提供了setSuggestionsAdapter()方法可以直接为搜索框设置适配器，需要注意的是，这个适配器必须跟数据库的Cursor对象一起使用.一般开发中遇到的需求是一边输入关键字一边显示搜索结果，所以需要监听搜索框的文字输入，一旦文字变化就查询数据库，更新搜索结果. 123456789101112131415161718192021222324252627282930313233343536373839404142// 监听搜索框文字变化mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() &#123; @Override public boolean onQueryTextSubmit(String s) &#123; return false; &#125; @Override public boolean onQueryTextChange(String s) &#123; Cursor cursor = TextUtils.isEmpty(s) ? null : queryData(s); // 不要频繁创建适配器，如果适配器已经存在，则只需要更新适配器中的cursor对象即可。 if (mSearchView.getSuggestionsAdapter() == null) &#123; mSearchView.setSuggestionsAdapter(new SimpleCursorAdapter(SearchViewActivity2.this, R.layout.item_layout, cursor, new String[]&#123;&quot;name&quot;&#125;, new int[]&#123;R.id.text1&#125;)); &#125; else &#123; mSearchView.getSuggestionsAdapter().changeCursor(cursor); &#125; return false; &#125;&#125;);private Cursor queryData(String key) &#123; SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(getFilesDir() + &quot;music.db&quot;, null); Cursor cursor = null; try &#123; String querySql = &quot;select * from tb_music where name like &apos;%&quot; + key + &quot;%&apos;&quot;; cursor = db.rawQuery(querySql, null); &#125; catch (Exception e) &#123; e.printStackTrace(); String createSql = &quot;create table tb_music (_id integer primary key autoincrement,name varchar(100))&quot;; db.execSQL(createSql); String insertSql = &quot;insert into tb_music values (null,?)&quot;; for (int i = 0; i &lt; Cheeses.sCheeseStrings.length; i++) &#123; db.execSQL(insertSql, new String[]&#123;Cheeses.sCheeseStrings[i]&#125;); &#125; String querySql = &quot;select * from tb_music where name like &apos;%&quot; + key + &quot;%&apos;&quot;; cursor = db.rawQuery(querySql, null); &#125; return cursor;&#125; AutoCompleteTextView本身默认触发查询动作的条件就是该控件中的文字至少要2个以上，如果我们想修改成只要有一个文字就触发查询的话，则可以这么做： 拿到SearchView中搜索框控件调用setThreshold()设置触发查询的字数 123456789101112@Overridepublic boolean onCreateOptionsMenu(Menu menu) &#123; getMenuInflater().inflate(R.menu.search_view, menu); MenuItem searchItem = menu.findItem(R.id.menu_search); //通过MenuItem得到SearchView mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem); mSearchAutoComplete = (SearchView.SearchAutoComplete) mSearchView.findViewById(R.id.search_src_text); ... //设置触发查询的最少字符数（默认2个字符才会触发查询） mSearchAutoComplete.setThreshold(1);｝ 也可以SearchView和listview、RecyclerView一起使用，设置适配器的方法是一样的123456if (mLv.getAdapter() == null) &#123; SimpleCursorAdapter adapter = new SimpleCursorAdapter(SearchViewActivity2.this, R.layout.item_layout, cursor, new String[]&#123;&quot;name&quot;&#125;, new int[]&#123;R.id.text1&#125;); mLv.setAdapter(adapter); &#125; else &#123; ((SimpleCursorAdapter) mLv.getAdapter()).changeCursor(cursor); &#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"MaterialDesign","slug":"Android/UI组件/MaterialDesign","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/"},{"name":"SearchView","slug":"Android/UI组件/MaterialDesign/SearchView","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/SearchView/"}],"tags":[{"name":"SearchView","slug":"SearchView","permalink":"http://yoursite.com/tags/SearchView/"},{"name":"CursorAdapter","slug":"CursorAdapter","permalink":"http://yoursite.com/tags/CursorAdapter/"}]},{"title":"Toolbar的使用","slug":"Toolbar的使用","date":"2018-03-23T07:58:04.000Z","updated":"2018-03-23T08:10:37.000Z","comments":true,"path":"2018/03/23/Toolbar的使用/","link":"","permalink":"http://yoursite.com/2018/03/23/Toolbar的使用/","excerpt":"指定Toolbar的高度、NaviagtionIcon、标题、字体等123456789101112131415161718&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/toolbar&quot; style=&quot;@style/Toolbar.MyStyle&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:background=&quot;?attr/colorPrimary&quot; app:navigationIcon=&quot;@mipmap/lg&quot; app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; app:title=&quot;本地音乐&quot; app:titleTextAppearance=&quot;@style/Toolbar.TitleText&quot; app:titleTextColor=&quot;@android:color/white&quot;/&gt;&lt;/LinearLayout&gt; 其中style指向的Toolbar.MyStyle是设置标题与NavigationIcon的距离，titleTextAppearance指向的Toolbar.TitleText是设置标题文字大小。","text":"指定Toolbar的高度、NaviagtionIcon、标题、字体等123456789101112131415161718&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/toolbar&quot; style=&quot;@style/Toolbar.MyStyle&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:background=&quot;?attr/colorPrimary&quot; app:navigationIcon=&quot;@mipmap/lg&quot; app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot; app:title=&quot;本地音乐&quot; app:titleTextAppearance=&quot;@style/Toolbar.TitleText&quot; app:titleTextColor=&quot;@android:color/white&quot;/&gt;&lt;/LinearLayout&gt; 其中style指向的Toolbar.MyStyle是设置标题与NavigationIcon的距离，titleTextAppearance指向的Toolbar.TitleText是设置标题文字大小。 在style.xml中创建Toolbar的自定义样式12345678910&lt;!--标题与NavigationIcon的距离--&gt;&lt;style name=&quot;Toolbar.MyStyle&quot; parent=&quot;Base.Widget.AppCompat.Toolbar&quot;&gt; &lt;item name=&quot;contentInsetStart&quot;&gt;0dp&lt;/item&gt; &lt;item name=&quot;contentInsetStartWithNavigation&quot;&gt;0dp&lt;/item&gt;&lt;/style&gt;&lt;!--Toolbar标题文字大小--&gt;&lt;style name=&quot;Toolbar.TitleText&quot; parent=&quot;TextAppearance.Widget.AppCompat.Toolbar.Title&quot;&gt; &lt;item name=&quot;android:textSize&quot;&gt;15sp&lt;/item&gt;&lt;/style&gt; 如果不设置的话，效果不好，NavigationIcon和Toolbar的标题之前的间距看起来很大. 在Style.xml中创建无ActionBar的主题，并设置主题背景色12345678&lt;style name=&quot;AppTheme.NoActionBar2&quot; parent=&quot;AppTheme&quot;&gt; &lt;item name=&quot;colorPrimary&quot;&gt;#D33A31&lt;/item&gt; &lt;item name=&quot;colorPrimaryDark&quot;&gt;#D33A31&lt;/item&gt; &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt; &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;!--设置menu中item的图标颜色--&gt; &lt;item name=&quot;android:textColorSecondary&quot;&gt;#ffffff&lt;/item&gt;&lt;/style&gt; 不设置textColorSecondary的话，默认menu的item图标是黑色. 为Activity设置主题1234567891011121314&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.lqr.materialdesigndemo&quot;&gt; &lt;application ... android:theme=&quot;@style/AppTheme&quot;&gt; ... &lt;activity android:name=&quot;.SearchViewActivity2&quot; android:screenOrientation=&quot;portrait&quot; android:theme=&quot;@style/AppTheme.NoActionBar2&quot;/&gt; &lt;/application&gt;&lt;/manifest&gt; 在Activity中设置Toolbar的代码如下：123456789101112public class SearchViewActivity2 extends AppCompatActivity &#123; @Override protected void onCreate(@Nullable Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_search_view2); // 使用Toolbar代替actionbar Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); &#125; ...&#125; 设置Menu1）创建菜单布局search_view.xml123456789101112131415161718192021222324252627282930313233343536373839&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt; &lt;item android:id=&quot;@+id/menu_search&quot; android:orderInCategory=&quot;100&quot; android:title=&quot;搜索&quot; app:actionViewClass=&quot;android.support.v7.widget.SearchView&quot; app:showAsAction=&quot;always&quot; /&gt; &lt;item android:id=&quot;@+id/scan_local_music&quot; android:icon=&quot;@mipmap/lv&quot; android:orderInCategory=&quot;100&quot; android:title=&quot;扫描本地音乐&quot; app:showAsAction=&quot;never&quot; /&gt; &lt;item android:id=&quot;@+id/select_sort_way&quot; android:icon=&quot;@mipmap/lt&quot; android:orderInCategory=&quot;100&quot; android:title=&quot;选择排序方式&quot; app:showAsAction=&quot;never&quot; /&gt; &lt;item android:id=&quot;@+id/get_cover_lyrics&quot; android:icon=&quot;@mipmap/lq&quot; android:orderInCategory=&quot;100&quot; android:title=&quot;获取封面歌词&quot; app:showAsAction=&quot;never&quot; /&gt; &lt;item android:id=&quot;@+id/imporve_tone_quality&quot; android:icon=&quot;@mipmap/lw&quot; android:orderInCategory=&quot;100&quot; android:title=&quot;升级音质&quot; app:showAsAction=&quot;never&quot; /&gt;&lt;/menu&gt; 2）在Activity中设置Menu的代码如下：1234567891011121314151617181920212223242526272829303132public class SearchViewActivity2 extends AppCompatActivity &#123; private SearchView mSearchView; ... @Override public boolean onCreateOptionsMenu(Menu menu) &#123; getMenuInflater().inflate(R.menu.search_view, menu); MenuItem searchItem = menu.findItem(R.id.menu_search); //通过MenuItem得到SearchView mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem); return super.onCreateOptionsMenu(menu); &#125; // 让菜单同时显示图标和文字 @Override public boolean onMenuOpened(int featureId, Menu menu) &#123; if (menu != null) &#123; if (menu.getClass().getSimpleName().equalsIgnoreCase(&quot;MenuBuilder&quot;)) &#123; try &#123; Method method = menu.getClass().getDeclaredMethod(&quot;setOptionalIconsVisible&quot;, Boolean.TYPE); method.setAccessible(true); method.invoke(menu, true); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125; return super.onMenuOpened(featureId, menu); &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"MaterialDesign","slug":"Android/UI组件/MaterialDesign","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/"}],"tags":[{"name":"Toolbar","slug":"Toolbar","permalink":"http://yoursite.com/tags/Toolbar/"}]},{"title":"SearchView的使用(二)","slug":"SearchView的使用（二）","date":"2018-03-23T02:45:35.000Z","updated":"2018-03-23T05:59:30.000Z","comments":true,"path":"2018/03/23/SearchView的使用（二）/","link":"","permalink":"http://yoursite.com/2018/03/23/SearchView的使用（二）/","excerpt":"去掉默认下划线 改为圆角搜索框布局，注意SearchView不设置背景123456&lt;SearchView android:id=&quot;@+id/sv_cus&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:iconifiedByDefault=&quot;false&quot; android:queryHint=&quot;请输入姓名&quot; /&gt;","text":"去掉默认下划线 改为圆角搜索框布局，注意SearchView不设置背景123456&lt;SearchView android:id=&quot;@+id/sv_cus&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:iconifiedByDefault=&quot;false&quot; android:queryHint=&quot;请输入姓名&quot; /&gt; 反射修改SearchView里的下划线，SearchView是组合控件1234567891011121314151617if (svCustomer != null) &#123; try &#123; //--拿到字节码 Class&lt;?&gt; argClass = svCustomer.getClass(); //--指定某个私有属性,mSearchPlate是搜索框父布局的名字 Field ownField = argClass.getDeclaredField(&quot;mSearchPlate&quot;); //--暴力反射,只有暴力反射才能拿到私有属性 ownField.setAccessible(true); View mView = (View) ownField.get(svCustomer); //--设置背景 mView.setBackgroundResource(R.drawable.searchview_line); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; 圆角样式 searchview_line.xml123456789101112131415&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot; &gt; &lt;!-- 表示shape的四个角的角度。只适用于矩形shape，这里的角度是指圆角的程度 --&gt; &lt;corners android:radius=&quot;50dp&quot; /&gt; &lt;!-- 这个标签表示纯色填充，通过android:color即可指定shape中填充的颜色 --&gt; &lt;solid android:color=&quot;@color/white&quot; /&gt; &lt;!-- Shape的描边，下面指定了描边的宽度和描边的颜色 --&gt; &lt;stroke android:width=&quot;1dp&quot; android:color=&quot;#d9d9d9&quot; /&gt; &lt;/shape&gt;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"MaterialDesign","slug":"Android/UI组件/MaterialDesign","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/"},{"name":"SearchView","slug":"Android/UI组件/MaterialDesign/SearchView","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/SearchView/"}],"tags":[{"name":"SearchView","slug":"SearchView","permalink":"http://yoursite.com/tags/SearchView/"}]},{"title":"SearchView的使用(一)","slug":"SearchView的使用（一）","date":"2018-03-23T02:42:56.000Z","updated":"2018-03-23T07:57:14.000Z","comments":true,"path":"2018/03/23/SearchView的使用（一）/","link":"","permalink":"http://yoursite.com/2018/03/23/SearchView的使用（一）/","excerpt":"点击menu弹出SearchView123456789101112&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt; &lt;item android:id=&quot;@+id/menu_search&quot; android:orderInCategory=&quot;100&quot; android:title=&quot;搜索&quot; app:actionViewClass=&quot;android.support.v7.widget.SearchView&quot; app:showAsAction=&quot;always&quot; /&gt; ...&lt;/menu&gt;","text":"点击menu弹出SearchView123456789101112&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt; &lt;item android:id=&quot;@+id/menu_search&quot; android:orderInCategory=&quot;100&quot; android:title=&quot;搜索&quot; app:actionViewClass=&quot;android.support.v7.widget.SearchView&quot; app:showAsAction=&quot;always&quot; /&gt; ...&lt;/menu&gt; 获取SearchView123456789@Overridepublic boolean onCreateOptionsMenu(Menu menu) &#123; getMenuInflater().inflate(R.menu.search_view, menu); MenuItem searchItem = menu.findItem(R.id.menu_search); //通过MenuItem得到SearchView mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem); ... return super.onCreateOptionsMenu(menu);&#125; 效果设置 12345678910searchView.setIconified(false);//设置searchView处于展开状态searchView.onActionViewExpanded();// 当展开无输入内容的时候，没有关闭的图标searchView.setIconifiedByDefault(false);//默认为true在框内，设置false则在框外//设置最大宽度mSearchView.setMaxWidth(500);//设置是否显示搜索框展开时的提交按钮mSearchView.setSubmitButtonEnabled(true);//设置输入框提示语mSearchView.setQueryHint(&quot;hint&quot;); 关闭SearchView 1234567891011121314private SearchView mSearchView;private SearchView.SearchAutoComplete mSearchAutoComplete;if (mSearchAutoComplete.isShown()) &#123; try &#123; //如果搜索框中有文字，则会先清空文字，但网易云音乐是在点击返回键时直接关闭搜索框 mSearchAutoComplete.setText(&quot;&quot;); Method method = mSearchView.getClass().getDeclaredMethod(&quot;onCloseClicked&quot;); method.setAccessible(true); method.invoke(mSearchView); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; 自定义样式修改默认图标12345678&lt;style name=&quot;Widget.SearchView&quot; parent=&quot;Widget.AppCompat.SearchView&quot;&gt; &lt;!--修改搜索框提示文字--&gt; &lt;item name=&quot;defaultQueryHint&quot;&gt;搜索本地歌曲&lt;/item&gt; &lt;!--修改打开搜索框的搜索按钮的图标--&gt; &lt;item name=&quot;searchIcon&quot;&gt;@mipmap/m5&lt;/item&gt; &lt;!--修改搜索框左边的搜索按钮图标--&gt; &lt;item name=&quot;searchHintIcon&quot;&gt;@null&lt;/item&gt;&lt;/style&gt; 修改文字样式1234567mSearchAutoComplete = (SearchView.SearchAutoComplete) mSearchView.findViewById(R.id.search_src_text); mSearchView.setQueryHint(&quot;搜索本地歌曲by code&quot;); //设置输入框提示文字样式 mSearchAutoComplete.setHintTextColor(getResources().getColor(android.R.color.darker_gray)); mSearchAutoComplete.setTextColor(getResources().getColor(android.R.color.background_light)); mSearchAutoComplete.setTextSize(14); 设置搜索框有字时显示叉叉，无字时隐藏叉叉12mSearchView.onActionViewExpanded();mSearchView.setIconified(true);","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"MaterialDesign","slug":"Android/UI组件/MaterialDesign","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/"},{"name":"SearchView","slug":"Android/UI组件/MaterialDesign/SearchView","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/SearchView/"}],"tags":[{"name":"SearchView","slug":"SearchView","permalink":"http://yoursite.com/tags/SearchView/"}]},{"title":"TabLayout用法（二）","slug":"TabLayout用法（二）","date":"2018-03-23T00:57:53.000Z","updated":"2018-03-23T02:56:31.000Z","comments":true,"path":"2018/03/23/TabLayout用法（二）/","link":"","permalink":"http://yoursite.com/2018/03/23/TabLayout用法（二）/","excerpt":"修改tabIndicator这个指示条的长度123456789101112131415161718192021222324252627282930public void setIndicator(MainActivity context, TabLayout tabs, int leftDip, int rightDip) &#123; Class&lt;?&gt; tabLayout = tabs.getClass(); Field tabStrip = null; try &#123; tabStrip = tabLayout.getDeclaredField(&quot;mTabStrip&quot;); &#125; catch (NoSuchFieldException e) &#123; e.printStackTrace(); &#125; tabStrip.setAccessible(true); LinearLayout ll_tab = null; try &#123; ll_tab = (LinearLayout) tabStrip.get(tabs); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; int left = (int) (getDisplayMetrics(context).density * leftDip); int right = (int) (getDisplayMetrics(context).density * rightDip); for (int i = 0; i &lt; ll_tab.getChildCount(); i++) &#123; View child = ll_tab.getChildAt(i); child.setPadding(0, 0, 0, 0); LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.MATCH_PARENT, 1); params.leftMargin = left; params.rightMargin = right; child.setLayoutParams(params); child.invalidate(); &#125; &#125; 调用上面的反射setIndicator(this, mTabLayout, 20, 20);","text":"修改tabIndicator这个指示条的长度123456789101112131415161718192021222324252627282930public void setIndicator(MainActivity context, TabLayout tabs, int leftDip, int rightDip) &#123; Class&lt;?&gt; tabLayout = tabs.getClass(); Field tabStrip = null; try &#123; tabStrip = tabLayout.getDeclaredField(&quot;mTabStrip&quot;); &#125; catch (NoSuchFieldException e) &#123; e.printStackTrace(); &#125; tabStrip.setAccessible(true); LinearLayout ll_tab = null; try &#123; ll_tab = (LinearLayout) tabStrip.get(tabs); &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); &#125; int left = (int) (getDisplayMetrics(context).density * leftDip); int right = (int) (getDisplayMetrics(context).density * rightDip); for (int i = 0; i &lt; ll_tab.getChildCount(); i++) &#123; View child = ll_tab.getChildAt(i); child.setPadding(0, 0, 0, 0); LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.MATCH_PARENT, 1); params.leftMargin = left; params.rightMargin = right; child.setLayoutParams(params); child.invalidate(); &#125; &#125; 调用上面的反射setIndicator(this, mTabLayout, 20, 20); TabLayout的标准写法123456789101112131415161718192021222324252627282930313233343536373839404142434445mViewPager = (ViewPager) findViewById(R.id.view_pager); mViewPager.setOffscreenPageLimit(2); mTabLayout = (TabLayout) findViewById(R.id.toolbar_tab); mTabLayout.addTab(mTabLayout.newTab()); mTabLayout.addTab(mTabLayout.newTab()); mTabLayout.addTab(mTabLayout.newTab()); if (mFragment1 == null) &#123; mFragment1 = new ListFragment(); &#125; if (mFragment2 == null) &#123; mFragment2 = new ListFragment(); mPagerAdapter = new PagerAdapter(getSupportFragmentManager()); mViewPager.setAdapter(mPagerAdapter); mTabLayout.setupWithViewPager(mViewPager);//里面removeAllTabs，标题没了 mTabLayout.getTabAt(0).setText(&quot;A&quot;);//所以重新设置标题 mTabLayout.getTabAt(1).setText(&quot;B&quot;); public class PagerAdapter extends FragmentPagerAdapter &#123; public PagerAdapter(FragmentManager fm) &#123; super(fm); &#125; @Override public Fragment getItem(int position) &#123; if (position == 0) &#123; return mFragment1; &#125; else if (position == 1) &#123; return mFragment2; &#125; else if (position == 2) &#123; return mFragment3; &#125; return null; &#125; @Override public int getCount() &#123; return 3; &#125; &#125; 自定义tabItem12345678910111213141516171819202122232425mTabLayout.getTabAt(0).setCustomView(getTabView(0));mTabLayout.getTabAt(1).setCustomView(getTabView(1));public View getTabView(final int position) &#123; final View view = LayoutInflater.from(this).inflate(R.layout.item_tab, null); TextView txtTitle = (TextView) view.findViewById(R.id.txt_title); final ImageView imgTitle = (ImageView) view.findViewById(R.id.img_title); imgTitle.setImageResource(tabIcons[position]); txtTitle.setText(titles.get(position)); if (position == 0) &#123; txtTitle.setTextColor(Color.parseColor(&quot;#057523&quot;)); &#125; else &#123; imgTitle.setVisibility(View.INVISIBLE); txtTitle.setTextColor(Color.parseColor(&quot;#ced0d3&quot;)); &#125; view.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; startPropertyAnim(imgTitle); mViewPager.setCurrentItem(position); &#125; &#125;); return view; &#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"MaterialDesign","slug":"Android/UI组件/MaterialDesign","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/"},{"name":"TabLayout","slug":"Android/UI组件/MaterialDesign/TabLayout","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/TabLayout/"}],"tags":[{"name":"TabLayout","slug":"TabLayout","permalink":"http://yoursite.com/tags/TabLayout/"}]},{"title":"TabLayout的用法（一）","slug":"TabLayout的用法（一）","date":"2018-03-22T07:37:39.000Z","updated":"2018-03-22T08:48:41.000Z","comments":true,"path":"2018/03/22/TabLayout的用法（一）/","link":"","permalink":"http://yoursite.com/2018/03/22/TabLayout的用法（一）/","excerpt":"布局代码123456789101112131415161718192021222324252627282930313233343536373839404142&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;android.support.design.widget.TabLayout android:id=&quot;@+id/toolbar_tab&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:layout_gravity=&quot;bottom&quot; android:background=&quot;#ffffff&quot; android:fillViewport=&quot;false&quot; app:tabMode=&quot;fixed&quot; app:layout_scrollFlags=&quot;scroll&quot; app:tabIndicatorColor=&quot;#057523&quot; app:tabIndicatorHeight=&quot;2.0dp&quot; app:tabSelectedTextColor=&quot;#057523&quot; app:tabTextColor=&quot;#ced0d3&quot;&gt; &lt;android.support.design.widget.TabItem android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;a&quot; /&gt; &lt;android.support.design.widget.TabItem android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;b&quot; /&gt; &lt;android.support.design.widget.TabItem android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;c&quot; /&gt; &lt;/android.support.design.widget.TabLayout&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/view_pager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt;","text":"布局代码123456789101112131415161718192021222324252627282930313233343536373839404142&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;android.support.design.widget.TabLayout android:id=&quot;@+id/toolbar_tab&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; android:layout_gravity=&quot;bottom&quot; android:background=&quot;#ffffff&quot; android:fillViewport=&quot;false&quot; app:tabMode=&quot;fixed&quot; app:layout_scrollFlags=&quot;scroll&quot; app:tabIndicatorColor=&quot;#057523&quot; app:tabIndicatorHeight=&quot;2.0dp&quot; app:tabSelectedTextColor=&quot;#057523&quot; app:tabTextColor=&quot;#ced0d3&quot;&gt; &lt;android.support.design.widget.TabItem android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;a&quot; /&gt; &lt;android.support.design.widget.TabItem android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;b&quot; /&gt; &lt;android.support.design.widget.TabItem android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;c&quot; /&gt; &lt;/android.support.design.widget.TabLayout&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/view_pager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt; 属性说明12345app:tabIndicatorColor ：指示条的颜色app:tabIndicatorHeight ：指示条的高度app:tabSelectedTextColor ： tab被选中时的字体颜色app:tabTextColor ： tab未被选中时的字体颜色app:tabMode=&quot;scrollable&quot; ： 默认是fixed：固定的，标签很多时候会被挤压，不能滑动。 不显示指示条12app:tabIndicatorHeight=&quot;0dp&quot;app:tabIndicatorColor=&quot;@color/transparent&quot; tab明明设置的小写，但是运行出来确是大写 如何显示小写：12//找到了一个属性叫app:tabTextAppearance，这是Tablayout的属性。所以我们要自定义样式app:tabTextAppearance=&quot;@style/MyTabLayoutTextAppearance&quot; styles.xml里12345&lt;style name=&quot;MyTabLayoutTextAppearance&quot;parent=&quot;TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse&quot;&gt;&lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&lt;item name=&quot;android:textAllCaps&quot;&gt;false&lt;/item&gt;&lt;/style&gt;//这里的android:textAllCaps属性就是控制字体大小写的，TabLayout里默认是true，我们手动改成false即可 调节字体大小123app:tabTextAppearance=&quot;@android:style/TextAppearance.Holo.Large&quot;app:tabTextAppearance=&quot;@android:style/TextAppearance.Holo.Medium&quot;app:tabTextAppearance=&quot;@android:style/TextAppearance.Holo.Small&quot; 不要用文本，用icon Tab是使用adapter中的getPageTitle()方法做其显示的内容，这个方法返回类型为CharSequence。于是，我们可以在PagerAdapter中重写getPageTitle()方法，创建一个SpannableString，而将图标放置在ImageSpan中，设置在SpannableString中. 12345678910111213141516private int[] imageResId = &#123; R.mipmap.ic_0, R.mipmap.ic_1, R.mipmap.ic_2 &#125;; @Override public CharSequence getPageTitle(int position)&#123; Drawable image = ContextCompat.getDrawable(MainActivity.this, imageResId[position]); image.setBounds(0, 0, image.getIntrinsicWidth(), image.getIntrinsicHeight()); SpannableString sb = new SpannableString(&quot; &quot;); ImageSpan imageSpan = new ImageSpan(image, ImageSpan.ALIGN_BOTTOM); sb.setSpan(imageSpan, 0, 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); return sb; &#125; 文本+icon12//只需加上title即可SpannableString spannableString = new SpannableString(&quot; &quot; + title);","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"MaterialDesign","slug":"Android/UI组件/MaterialDesign","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/"},{"name":"TabLayout","slug":"Android/UI组件/MaterialDesign/TabLayout","permalink":"http://yoursite.com/categories/Android/UI组件/MaterialDesign/TabLayout/"}],"tags":[{"name":"TabLayout","slug":"TabLayout","permalink":"http://yoursite.com/tags/TabLayout/"},{"name":"MaterialDesign","slug":"MaterialDesign","permalink":"http://yoursite.com/tags/MaterialDesign/"}]},{"title":"EditText的使用","slug":"EditText的使用","date":"2018-03-22T02:57:00.000Z","updated":"2018-03-22T08:48:22.000Z","comments":true,"path":"2018/03/22/EditText的使用/","link":"","permalink":"http://yoursite.com/2018/03/22/EditText的使用/","excerpt":"EditText切换明密文1editText1.setTransformationMethod(PasswordTransformationMethod.getInstance());//明文 1editText1.setTransformationMethod(HideReturnsTransformationMethod.getInstance());//密文","text":"EditText切换明密文1editText1.setTransformationMethod(PasswordTransformationMethod.getInstance());//明文 1editText1.setTransformationMethod(HideReturnsTransformationMethod.getInstance());//密文 拿到drawableRight的bounds和drawablesfinal Drawable[] drawables = editText1.getCompoundDrawables();final int eyeWidth = drawables[2].getBounds().width();// 眼睛图标的宽度final Drawable drawableEyeOpen = getResources().getDrawable(R.drawable.open);drawableEyeOpen.setBounds(drawables[2].getBounds());//这一步不能省略 drawableRight的点击事件123456789101112131415161718192021editText1.setOnTouchListener(new View.OnTouchListener() &#123; @Override public boolean onTouch(View v, MotionEvent event) &#123; if (event.getAction() == MotionEvent.ACTION_UP) &#123; float et_pwdMinX = v.getWidth() - eyeWidth - editText1.getPaddingRight(); float et_pwdMaxX = v.getWidth(); float et_pwdMinY = 0; float et_pwdMaxY = v.getHeight(); float x = event.getX(); float y = event.getY(); if (x &lt; et_pwdMaxX &amp;&amp; x &gt; et_pwdMinX &amp;&amp; y &gt; et_pwdMinY &amp;&amp; y &lt; et_pwdMaxY) &#123; // 点击了眼睛图标的位置 &#125; &#125; return false; &#125; &#125; 光标的处理光标位置 editText.setSelection(index); 取消光标显示 edittext.setCursorVisible(false);","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"EditText","slug":"Android/UI组件/EditText","permalink":"http://yoursite.com/categories/Android/UI组件/EditText/"}],"tags":[{"name":"EditText","slug":"EditText","permalink":"http://yoursite.com/tags/EditText/"},{"name":"明文密文","slug":"明文密文","permalink":"http://yoursite.com/tags/明文密文/"}]},{"title":"checkbox的使用","slug":"checkbox的使用","date":"2018-03-22T02:41:51.000Z","updated":"2018-03-22T08:47:51.000Z","comments":true,"path":"2018/03/22/checkbox的使用/","link":"","permalink":"http://yoursite.com/2018/03/22/checkbox的使用/","excerpt":"CheckBox的OnCheckChangedListener和OnClickListener的区别CheckBox状态监听一般使用OnCheckChangedListener， CheckBox 和 Switch 的状态不一定通过点击改变，还可以通过其他的方式，比如直接使用方法setChecked，这样的话 OnClickListener就不能监听到，它状态的改变不是来自onClick事件，OnCheckChangedListener则是监听CheckBox的状态。","text":"CheckBox的OnCheckChangedListener和OnClickListener的区别CheckBox状态监听一般使用OnCheckChangedListener， CheckBox 和 Switch 的状态不一定通过点击改变，还可以通过其他的方式，比如直接使用方法setChecked，这样的话 OnClickListener就不能监听到，它状态的改变不是来自onClick事件，OnCheckChangedListener则是监听CheckBox的状态。","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"CheckBox","slug":"Android/UI组件/CheckBox","permalink":"http://yoursite.com/categories/Android/UI组件/CheckBox/"}],"tags":[{"name":"CheckBox","slug":"CheckBox","permalink":"http://yoursite.com/tags/CheckBox/"},{"name":"OnCheckChangedListener","slug":"OnCheckChangedListener","permalink":"http://yoursite.com/tags/OnCheckChangedListener/"},{"name":"OnClickListener","slug":"OnClickListener","permalink":"http://yoursite.com/tags/OnClickListener/"}]},{"title":"AlertDialog的使用","slug":"AlertDialog的使用","date":"2018-03-22T02:29:54.000Z","updated":"2018-03-22T08:47:16.000Z","comments":true,"path":"2018/03/22/AlertDialog的使用/","link":"","permalink":"http://yoursite.com/2018/03/22/AlertDialog的使用/","excerpt":"自定义布局代码：123456789101112131415161718192021222324252627282930AlertDialog.Builder builder = new AlertDialog.Builder(this); final AlertDialog dialog = builder.create(); View view = View.inflate(this, R.layout.dailog_input_password, null); //dialog.setView(view);// 将自定义的布局文件设置给dialog dialog.setView(view, 0, 0, 0, 0);// 设置边距为0,保证在2.x的版本上运行没问题 final EditText etPassword = (EditText) view .findViewById(R.id.et_password); Button btnOK = (Button) view.findViewById(R.id.btn_ok); Button btnCancel = (Button) view.findViewById(R.id.btn_cancel); btnOK.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View v) &#123; &#125; &#125;); btnCancel.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View v) &#123; dialog.dismiss();// 隐藏dialog &#125; &#125;); dialog.show();","text":"自定义布局代码：123456789101112131415161718192021222324252627282930AlertDialog.Builder builder = new AlertDialog.Builder(this); final AlertDialog dialog = builder.create(); View view = View.inflate(this, R.layout.dailog_input_password, null); //dialog.setView(view);// 将自定义的布局文件设置给dialog dialog.setView(view, 0, 0, 0, 0);// 设置边距为0,保证在2.x的版本上运行没问题 final EditText etPassword = (EditText) view .findViewById(R.id.et_password); Button btnOK = (Button) view.findViewById(R.id.btn_ok); Button btnCancel = (Button) view.findViewById(R.id.btn_cancel); btnOK.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View v) &#123; &#125; &#125;); btnCancel.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View v) &#123; dialog.dismiss();// 隐藏dialog &#125; &#125;); dialog.show(); 改变窗口透明度12345678910try &#123; WindowManager.LayoutParams params = dialog.getWindow().getAttributes(); params.width= 700; //params.height=700; params.alpha = 1f; dialog.getWindow().setAttributes(params); &#125;catch (NullPointerException e)&#123; Log.wtf(&quot;alertDialogwindow&quot;,e); &#125; 系统AlertDialog12345678910111213141516AlertDialog.Builder builder = new AlertDialog.Builder(context); builder.setMessage(&quot;确认退出吗？&quot;); builder.setTitle(&quot;提示&quot;); builder.setPositiveButton(&quot;确认&quot;, new DialogInterface.OnClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which) &#123; listener.positiveResult(dialog,which); &#125; &#125;); builder.setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() &#123; @Override public void onClick(DialogInterface dialog, int which) &#123; &#125; &#125;); builder.create().show(); 七种不同dialoghttps://www.oschina.net/question/54100_32486 多选，单选，功能菜单。AlertDialog的多类型设置http://www.jianshu.com/p/6caffdbcd5db alertdialog默认背景做透明处理http://ask.csdn.net/questions/242967 1234567891011&lt;style name=&quot;AlertDialogStyle&quot; parent=&quot;@android:style/Theme.Dialog&quot;&gt; &lt;item name=&quot;android:windowBackground&quot;&gt;@android:color/transparent&lt;/item&gt; &lt;item name=&quot;android:windowContentOverlay&quot;&gt;@null&lt;/item&gt; &lt;item name=&quot;android:windowIsFloating&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:windowFrame&quot;&gt;@null&lt;/item&gt; &lt;item name=&quot;android:backgroundDimEnabled&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;&lt;/style&gt; AlertDialog dialog = new AlertDialog.Builder(activity, R.style.AlertDialogStyle).create();","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"dialog","slug":"Android/UI组件/dialog","permalink":"http://yoursite.com/categories/Android/UI组件/dialog/"}],"tags":[{"name":"AlertDialog","slug":"AlertDialog","permalink":"http://yoursite.com/tags/AlertDialog/"}]},{"title":"progressDialog与progressBar","slug":"progressDialog与progressBar","date":"2018-03-22T02:17:19.000Z","updated":"2018-03-22T08:46:46.000Z","comments":true,"path":"2018/03/22/progressDialog与progressBar/","link":"","permalink":"http://yoursite.com/2018/03/22/progressDialog与progressBar/","excerpt":"progressDialog圆形和水平 系统两种进度条http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0703/1628.html progressBar更换progressDrawablehttp://www.jb51.net/article/105417.htm","text":"progressDialog圆形和水平 系统两种进度条http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0703/1628.html progressBar更换progressDrawablehttp://www.jb51.net/article/105417.htm 123456789101112131415161718192021222324252627282930//布局文件代码：&lt;ProgressBarandroid:id=&quot;@+id/progressbar&quot;android:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:indeterminateDrawable=&quot;@drawable/progressbar&quot; /&gt;//此XML文件新建在drawable目录下：文件名为：progressbar&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;animated-rotate xmlns:android=&quot;&lt;a href=&quot;http://schemas.android.com/apk/res/android&quot; rel=&quot;external nofollow&quot; &gt;http://schemas.android.com/apk/res/android&lt;/a&gt;&quot; android:pivotX=&quot;50%&quot; android:pivotY=&quot;50%&quot; android:fromDegrees=&quot;0&quot; android:toDegrees=&quot;360&quot;&gt; &lt;shape android:shape=&quot;ring&quot; android:innerRadiusRatio=&quot;3&quot; android:thicknessRatio=&quot;8&quot; android:useLevel=&quot;false&quot;&gt; &lt;gradient android:type=&quot;sweep&quot; android:useLevel=&quot;false&quot; android:startColor=&quot;#6BD3FF&quot; android:centerColor=&quot;#FF7121&quot; android:centerY=&quot;0.50&quot; android:endColor=&quot;#FFFF00&quot; /&gt; &lt;/shape&gt;&lt;/animated-rotate&gt;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"UI组件","slug":"Android/UI组件","permalink":"http://yoursite.com/categories/Android/UI组件/"},{"name":"dialog","slug":"Android/UI组件/dialog","permalink":"http://yoursite.com/categories/Android/UI组件/dialog/"}],"tags":[{"name":"progressDialog","slug":"progressDialog","permalink":"http://yoursite.com/tags/progressDialog/"},{"name":"progressBar","slug":"progressBar","permalink":"http://yoursite.com/tags/progressBar/"}]},{"title":"library使用注意事项","slug":"library使用注意事项","date":"2018-03-22T01:34:30.000Z","updated":"2018-03-22T01:55:21.000Z","comments":true,"path":"2018/03/22/library使用注意事项/","link":"","permalink":"http://yoursite.com/2018/03/22/library使用注意事项/","excerpt":"app依赖library，就可以使用它几乎所有东西。包括src,buildegradle,libs。。。一个as 的工程中，module不宜太多，否则会影响编译的速度，建议将不是经常变动的module打包成aar，主工程直接依赖aar可以大大提高编译的速度。","text":"app依赖library，就可以使用它几乎所有东西。包括src,buildegradle,libs。。。一个as 的工程中，module不宜太多，否则会影响编译的速度，建议将不是经常变动的module打包成aar，主工程直接依赖aar可以大大提高编译的速度。 当library的manifest里有权限的话，app的manifest可以不再重复添加；application类是必须在app的manifest注册。因为library是不能单独运行的library里的四大组件可以在其manifest里注册，app里不用管library的manifest里的Activity不能写1234&lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&lt;/intent-filter&gt; 这会使手机桌面多出现icon。如果librarys都写了这句，有几个library，桌面就多出几个icon library里不用重写Application。因为只有app的application集成library的Application，才会有用。library清单文件里不能设置application，因为它是库，不是应用程序 library代码里不能使用switch-case library用butterknife，@BindView(R2.id.xxx) @OnClick(R2.id.xxx)setContentView(R.id.xcxx) findviewbyid(R.id.x)正常butterknife的注解需要用R2，系统的仍用R","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"知识点","slug":"Android/知识点","permalink":"http://yoursite.com/categories/Android/知识点/"}],"tags":[{"name":"library","slug":"library","permalink":"http://yoursite.com/tags/library/"}]},{"title":"按微信时间规则格式化时间wechattimeformat","slug":"按微信时间规则格式化时间wechattimeformat","date":"2018-03-01T07:49:37.000Z","updated":"2018-03-01T10:01:19.000Z","comments":true,"path":"2018/03/01/按微信时间规则格式化时间wechattimeformat/","link":"","permalink":"http://yoursite.com/2018/03/01/按微信时间规则格式化时间wechattimeformat/","excerpt":"微信的时间格式化规则： 表示的是过去的时间，未来的时间无效 如果是今天，12点为中午，其他的时间分为上午和下午，以”中午几:xx”格式显示，12小时制（如下午6:09） 如果是昨天，显示为”昨天”","text":"微信的时间格式化规则： 表示的是过去的时间，未来的时间无效 如果是今天，12点为中午，其他的时间分为上午和下午，以”中午几:xx”格式显示，12小时制（如下午6:09） 如果是昨天，显示为”昨天” 如果是昨天以前的时间 昨天是周二或周三、周四、周五… 那么前天显示周一。前天以前的时间显示为”几月几日” 昨天是周一，那么前一周，显示为对应的周几（如昨天周一是20号，那么13-19号显示为周一到周日） 不满足以上两个条件，显示为”几月几日”（如：1月6日） 如果是去年及以前的时间，显示为”xxxx年几月几日”（如2016年1月3日） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172private String handleTime(String time) &#123; date = new Date(); Date start = null; try &#123; start = sdf.parse(time); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; DateTime dateTime = new DateTime(start); DateTime nowDT = new DateTime(date); assert start != null; if (dateTime.isAfter(nowDT)) &#123; Toast.makeText(mContext, &quot;时间有误，不是过去时间，超过了此时此刻&quot;, Toast.LENGTH_SHORT).show(); return &quot;&quot;; &#125;// Period period = new Period(start.getTime(),date.getTime()); if (dateTime.getYearOfCentury() == nowDT.getYearOfCentury()) &#123; int days = nowDT.getDayOfYear() - dateTime.getDayOfYear(); LogUtils.i(tag, &quot;handleTime- 距现在天数： &quot; + days); if (days &lt; 2) &#123; if (days == 1) &#123; String result = &quot;昨天&quot;; return result; &#125; else &#123; String hm = time.substring(13, 16); int hour = dateTime.getHourOfDay(); LogUtils.i(tag, &quot;handleTime- Hour： &quot; + hour); if (hour == 12) &#123; String result = &quot;中午&quot; + hm; return result; &#125; else if (hour &lt; 12) &#123; String result = &quot;早上&quot; + hour + hm; return result; &#125; else if (hour &gt; 12) &#123; hour = hour - 12; String result = &quot;下午&quot; + hour + hm; return result; &#125; &#125; &#125; else &#123; Log.d(&quot;------&quot;, &quot;handleTime: 周: &quot; + nowDT.dayOfWeek().getAsShortText(Locale.ENGLISH)); int week = dateTime.getWeekOfWeekyear(); LogUtils.i(tag, &quot;handleTime- 过去的 第几周： &quot; + week); int nowWeek = nowDT.getWeekOfWeekyear(); LogUtils.i(tag, &quot;handleTime- 现在的 第几周： &quot; + nowWeek); if (week == nowWeek) &#123; String result = dateTime.dayOfWeek().getAsShortText(Locale.CHINESE); return result; &#125; else if (nowWeek - week == 1) &#123; if (nowDT.dayOfWeek().getAsShortText(Locale.ENGLISH).equals(&quot;Mon&quot;) || nowDT.dayOfWeek().getAsShortText(Locale.ENGLISH).equals(&quot;Tue&quot;)) &#123; String result = dateTime.dayOfWeek().getAsShortText(Locale.CHINESE); return result; &#125; &#125; else &#123; int month = dateTime.getMonthOfYear(); int day = dateTime.getDayOfMonth(); String result = month + &quot;月&quot; + day + &quot;日&quot;; return result; &#125; &#125; &#125; else &#123; int year = dateTime.getYear();//2017XX getYearOfCentury只是超过2000年的数字 int month = dateTime.getMonthOfYear(); int day = dateTime.getDayOfMonth(); String result = year + &quot;年&quot; + month + &quot;月&quot; + day + &quot;日&quot;; return result; &#125; return &quot;&quot;; &#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"功能组件","slug":"Android/功能组件","permalink":"http://yoursite.com/categories/Android/功能组件/"},{"name":"时间处理","slug":"Android/功能组件/时间处理","permalink":"http://yoursite.com/categories/Android/功能组件/时间处理/"}],"tags":[{"name":"wechat","slug":"wechat","permalink":"http://yoursite.com/tags/wechat/"}]},{"title":"使用CursorLoader注意事项","slug":"使用CursorLoader注意事项","date":"2018-03-01T07:33:35.000Z","updated":"2018-03-01T10:00:39.000Z","comments":true,"path":"2018/03/01/使用CursorLoader注意事项/","link":"","permalink":"http://yoursite.com/2018/03/01/使用CursorLoader注意事项/","excerpt":"已经实现将Bitmap对象保存成外部存储中的一个jpg格式的文件。但此时该文件只是保存在外部存储的一个目录中，必须进入其所在的目录中才可以看到。在系统图库，相册和其他应用中无法看到新建的图片文件。为了让其他应用能够知道图片文件被创建，必须通知MediaProvider服务将新建的文件添加到图片数据库中。 Android系统中常驻一个MediaProvider服务，对应的进程名为android.process.media，此服务用来管理本机上的媒体文件，提供媒体管理服务。","text":"已经实现将Bitmap对象保存成外部存储中的一个jpg格式的文件。但此时该文件只是保存在外部存储的一个目录中，必须进入其所在的目录中才可以看到。在系统图库，相册和其他应用中无法看到新建的图片文件。为了让其他应用能够知道图片文件被创建，必须通知MediaProvider服务将新建的文件添加到图片数据库中。 Android系统中常驻一个MediaProvider服务，对应的进程名为android.process.media，此服务用来管理本机上的媒体文件，提供媒体管理服务。在系统开机或者收到外部存储的挂载消息后，MediaProvider会调用MediaScanner，MediaScanner会扫描外部存储中的所有文件，根据文件类型的后缀将文件信息保存到对应的数据库中，供其他APP使用。 MediaScannerReceiver是一个广播接收者，当它接收到特定的广播请求后，就会去扫描指定的文件，并根据文件信息将其添加到数据库中。当图片文件被创建后，就可以发送广播给MediaScannerReceiver，通知其扫描新建的图片文件。 保存到本地的图片，如果没发通知给MediaScanner，没有将图片信息保存到系统数据库，使用CursorLoader是加载不到图片的 使用方法： http://blog.csdn.net/yissan/article/details/51961707","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"功能组件","slug":"Android/功能组件","permalink":"http://yoursite.com/categories/Android/功能组件/"},{"name":"图片加载器","slug":"Android/功能组件/图片加载器","permalink":"http://yoursite.com/categories/Android/功能组件/图片加载器/"}],"tags":[{"name":"CursorLoader","slug":"CursorLoader","permalink":"http://yoursite.com/tags/CursorLoader/"}]}]}