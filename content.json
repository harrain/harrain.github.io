{"meta":{"title":"Damon Ren的博客","subtitle":null,"description":null,"author":"Damon Ren （江流百黎）","url":"http://yoursite.com"},"pages":[{"title":"archives","date":"2018-03-01T08:30:52.000Z","updated":"2018-03-01T08:33:14.000Z","comments":false,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-03-01T08:31:07.000Z","updated":"2018-03-01T08:33:55.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2018-03-01T08:31:17.000Z","updated":"2018-03-01T08:32:35.000Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Damon Ren笔名： 江流百黎未完待续…"},{"title":"categories","date":"2018-03-01T08:20:08.000Z","updated":"2018-03-01T08:29:39.000Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"按微信时间规则格式化时间wechattimeformat","slug":"按微信时间规则格式化时间wechattimeformat","date":"2018-03-01T07:49:37.000Z","updated":"2018-03-01T10:01:19.000Z","comments":true,"path":"2018/03/01/按微信时间规则格式化时间wechattimeformat/","link":"","permalink":"http://yoursite.com/2018/03/01/按微信时间规则格式化时间wechattimeformat/","excerpt":"微信的时间格式化规则： 表示的是过去的时间，未来的时间无效 如果是今天，12点为中午，其他的时间分为上午和下午，以”中午几:xx”格式显示，12小时制（如下午6:09） 如果是昨天，显示为”昨天”","text":"微信的时间格式化规则： 表示的是过去的时间，未来的时间无效 如果是今天，12点为中午，其他的时间分为上午和下午，以”中午几:xx”格式显示，12小时制（如下午6:09） 如果是昨天，显示为”昨天” 如果是昨天以前的时间 昨天是周二或周三、周四、周五… 那么前天显示周一。前天以前的时间显示为”几月几日” 昨天是周一，那么前一周，显示为对应的周几（如昨天周一是20号，那么13-19号显示为周一到周日） 不满足以上两个条件，显示为”几月几日”（如：1月6日） 如果是去年及以前的时间，显示为”xxxx年几月几日”（如2016年1月3日） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172private String handleTime(String time) &#123; date = new Date(); Date start = null; try &#123; start = sdf.parse(time); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; DateTime dateTime = new DateTime(start); DateTime nowDT = new DateTime(date); assert start != null; if (dateTime.isAfter(nowDT)) &#123; Toast.makeText(mContext, &quot;时间有误，不是过去时间，超过了此时此刻&quot;, Toast.LENGTH_SHORT).show(); return &quot;&quot;; &#125;// Period period = new Period(start.getTime(),date.getTime()); if (dateTime.getYearOfCentury() == nowDT.getYearOfCentury()) &#123; int days = nowDT.getDayOfYear() - dateTime.getDayOfYear(); LogUtils.i(tag, &quot;handleTime- 距现在天数： &quot; + days); if (days &lt; 2) &#123; if (days == 1) &#123; String result = &quot;昨天&quot;; return result; &#125; else &#123; String hm = time.substring(13, 16); int hour = dateTime.getHourOfDay(); LogUtils.i(tag, &quot;handleTime- Hour： &quot; + hour); if (hour == 12) &#123; String result = &quot;中午&quot; + hm; return result; &#125; else if (hour &lt; 12) &#123; String result = &quot;早上&quot; + hour + hm; return result; &#125; else if (hour &gt; 12) &#123; hour = hour - 12; String result = &quot;下午&quot; + hour + hm; return result; &#125; &#125; &#125; else &#123; Log.d(&quot;------&quot;, &quot;handleTime: 周: &quot; + nowDT.dayOfWeek().getAsShortText(Locale.ENGLISH)); int week = dateTime.getWeekOfWeekyear(); LogUtils.i(tag, &quot;handleTime- 过去的 第几周： &quot; + week); int nowWeek = nowDT.getWeekOfWeekyear(); LogUtils.i(tag, &quot;handleTime- 现在的 第几周： &quot; + nowWeek); if (week == nowWeek) &#123; String result = dateTime.dayOfWeek().getAsShortText(Locale.CHINESE); return result; &#125; else if (nowWeek - week == 1) &#123; if (nowDT.dayOfWeek().getAsShortText(Locale.ENGLISH).equals(&quot;Mon&quot;) || nowDT.dayOfWeek().getAsShortText(Locale.ENGLISH).equals(&quot;Tue&quot;)) &#123; String result = dateTime.dayOfWeek().getAsShortText(Locale.CHINESE); return result; &#125; &#125; else &#123; int month = dateTime.getMonthOfYear(); int day = dateTime.getDayOfMonth(); String result = month + &quot;月&quot; + day + &quot;日&quot;; return result; &#125; &#125; &#125; else &#123; int year = dateTime.getYear();//2017XX getYearOfCentury只是超过2000年的数字 int month = dateTime.getMonthOfYear(); int day = dateTime.getDayOfMonth(); String result = year + &quot;年&quot; + month + &quot;月&quot; + day + &quot;日&quot;; return result; &#125; return &quot;&quot;; &#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"功能组件","slug":"Android/功能组件","permalink":"http://yoursite.com/categories/Android/功能组件/"},{"name":"时间处理","slug":"Android/功能组件/时间处理","permalink":"http://yoursite.com/categories/Android/功能组件/时间处理/"}],"tags":[{"name":"wechat","slug":"wechat","permalink":"http://yoursite.com/tags/wechat/"}]},{"title":"使用CursorLoader注意事项","slug":"使用CursorLoader注意事项","date":"2018-03-01T07:33:35.000Z","updated":"2018-03-01T10:00:39.000Z","comments":true,"path":"2018/03/01/使用CursorLoader注意事项/","link":"","permalink":"http://yoursite.com/2018/03/01/使用CursorLoader注意事项/","excerpt":"已经实现将Bitmap对象保存成外部存储中的一个jpg格式的文件。但此时该文件只是保存在外部存储的一个目录中，必须进入其所在的目录中才可以看到。在系统图库，相册和其他应用中无法看到新建的图片文件。为了让其他应用能够知道图片文件被创建，必须通知MediaProvider服务将新建的文件添加到图片数据库中。 Android系统中常驻一个MediaProvider服务，对应的进程名为android.process.media，此服务用来管理本机上的媒体文件，提供媒体管理服务。","text":"已经实现将Bitmap对象保存成外部存储中的一个jpg格式的文件。但此时该文件只是保存在外部存储的一个目录中，必须进入其所在的目录中才可以看到。在系统图库，相册和其他应用中无法看到新建的图片文件。为了让其他应用能够知道图片文件被创建，必须通知MediaProvider服务将新建的文件添加到图片数据库中。 Android系统中常驻一个MediaProvider服务，对应的进程名为android.process.media，此服务用来管理本机上的媒体文件，提供媒体管理服务。在系统开机或者收到外部存储的挂载消息后，MediaProvider会调用MediaScanner，MediaScanner会扫描外部存储中的所有文件，根据文件类型的后缀将文件信息保存到对应的数据库中，供其他APP使用。 MediaScannerReceiver是一个广播接收者，当它接收到特定的广播请求后，就会去扫描指定的文件，并根据文件信息将其添加到数据库中。当图片文件被创建后，就可以发送广播给MediaScannerReceiver，通知其扫描新建的图片文件。 保存到本地的图片，如果没发通知给MediaScanner，没有将图片信息保存到系统数据库，使用CursorLoader是加载不到图片的 使用方法： http://blog.csdn.net/yissan/article/details/51961707","categories":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/categories/Android/"},{"name":"功能组件","slug":"Android/功能组件","permalink":"http://yoursite.com/categories/Android/功能组件/"},{"name":"图片加载器","slug":"Android/功能组件/图片加载器","permalink":"http://yoursite.com/categories/Android/功能组件/图片加载器/"}],"tags":[{"name":"CursorLoader","slug":"CursorLoader","permalink":"http://yoursite.com/tags/CursorLoader/"}]},{"title":"my first blog","slug":"my-first-blog","date":"2018-03-01T06:24:47.000Z","updated":"2018-03-01T06:56:31.000Z","comments":true,"path":"2018/03/01/my-first-blog/","link":"","permalink":"http://yoursite.com/2018/03/01/my-first-blog/","excerpt":"","text":"122018年3月1日，我正式开通了自己的博客。 每一天都要告诫自己要做点什么，一直在前进。","categories":[{"name":"初始","slug":"初始","permalink":"http://yoursite.com/categories/初始/"}],"tags":[{"name":"初始","slug":"初始","permalink":"http://yoursite.com/tags/初始/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-02-27T10:50:06.000Z","updated":"2018-03-01T09:54:16.000Z","comments":true,"path":"2018/02/27/hello-world/","link":"","permalink":"http://yoursite.com/2018/02/27/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"初始","slug":"初始","permalink":"http://yoursite.com/categories/初始/"}],"tags":[{"name":"初始","slug":"初始","permalink":"http://yoursite.com/tags/初始/"}]}]}